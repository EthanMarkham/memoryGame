{"version":3,"sources":["components/game/game.jsx","components/game/game.over.js","reducers/game.js","hooks/useWindowSize.js"],"names":["GameInfo","React","lazy","GameOver","require","default","gameReducer","useWindowSize","gameState","Game","props","dispatch","useReducer","me","state","windowSize","socket","useContext","SocketContext","useEffect","mounted","emit","on","data","type","payload","time","game","id","off","CLEANUP","squares","length","actions","toggleLeaveHelp","condition","value","toggleLabelHelp","toggleGameLabels","handleQuit","_","status","handleClick","squareSprings","useTransition","item","squareAnimations","flipSprings","useSprings","map","s","opacity","flipped","transform","config","mass","tension","friction","className","style","gridTemplateColumns","gridSize","gridTemplateRows","i","key","div","onClick","disabled","clickable","labels","card","civ","interpolate","o","t","backgroundImage","image","helpers","moveTimer","message","round","users","u","username","matches","action","copy","find","upNext","newSquare","setGameInfo","enabled","parseInt","undefined","leaveInfo","labelInfo","newGridCalc","getGridLayout","useState","width","height","size","setSize","useLayoutEffect","updateSize","window","innerWidth","innerHeight","addEventListener","removeEventListener"],"mappings":"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","file":"static/js/3.12d5d44a.chunk.js","sourcesContent":["import React, { useContext, useReducer, useEffect } from 'react';\r\nimport { SocketContext } from '../../context/socket';\r\nimport { useTransition, useSpring, animated as a, useSprings } from 'react-spring'\r\nimport { squareAnimations } from '../../helpers/transitions'\r\nconst GameInfo = React.lazy(() => import('./game.info'));\r\nconst GameOver = require(\"./game.over\").default;\r\n\r\nconst gameReducer = require('../../reducers/game').default;\r\nconst useWindowSize = require('../../hooks/useWindowSize').default;\r\nconst gameState = require('../../helpers/initialState').gameState;\r\n\r\n\r\nexport default function Game(props) {\r\n    const rootDispatch = props.dispatch;\r\n    const [state, dispatch] = useReducer(gameReducer, { me: props.me, ...gameState })\r\n    // const [hoverStyle, setHoverStyle] = useSpring(() => ({ xys: [0, 0, 1], config: { mass: 5, tension: 350, friction: 40 } }))\r\n    const windowSize = useWindowSize()\r\n    const socket = useContext(SocketContext);\r\n\r\n    const CLEANUP = (mounted) => {\r\n        socket.emit(\"LEAVE_GAME_ROOM\", state.game.id);\r\n        socket.off(\"GAME_INFO\", data => { if (mounted) dispatch({ type: \"GAME_INFO\", payload: data }) });\r\n        socket.off(\"GAME_TIMER\", time => { if (mounted) dispatch({ type: \"GAME_TIMER\", payload: time }) });\r\n    }\r\n\r\n    useEffect(() => {\r\n        let mounted = true;\r\n        if (mounted) socket.emit(\"GET_GAME\");\r\n        socket.on(\"GAME_INFO\", data => { if (mounted) dispatch({ type: \"GAME_INFO\", payload: data }) });\r\n        socket.on(\"GAME_TIMER\", time => { if (mounted) dispatch({ type: \"GAME_TIMER\", payload: time }) });\r\n        return (() => {\r\n            CLEANUP(mounted);\r\n            mounted = false;\r\n        })\r\n    }, [])\r\n\r\n    useEffect(() => dispatch({ type: \"SET_GRID\", payload: windowSize }), [windowSize, state.game.squares.length])\r\n\r\n    const actions = {\r\n        toggleLeaveHelp: condition => dispatch({ type: \"TOGGLE_LABELS\", payload: { type: \"LEAVE_INFO\", value: condition } }),\r\n        toggleLabelHelp: condition => dispatch({ type: \"TOGGLE_LABELS\", payload: { type: \"LABEL_INFO\", value: condition } }),\r\n        toggleGameLabels: condition => dispatch({ type: \"TOGGLE_LABELS\", payload: { type: \"GAME_INFO\", value: condition } }),\r\n        handleQuit: _ => (state.game.status !== \"GAME_OVER\") ? socket.emit(\"QUIT_GAME\") : socket.emit(\"GET_STATUS\"),\r\n        handleClick: id => socket.emit(\"GAME_CLICK\", id)\r\n    }\r\n\r\n    const squareSprings = useTransition(state.game.squares, item => item.id, squareAnimations);\r\n    const flipSprings = useSprings(state.game.squares.length, state.game.squares.map(s => ({\r\n        opacity: s.flipped ? 1 : 0,\r\n        transform: `perspective(600px) rotateY(${s.flipped ? 180 : 0}deg)`,\r\n        config: { mass: 5, tension: 500, friction: 80 }\r\n    })));\r\n\r\n    return (\r\n        <div className=\"game\">\r\n            {state.game.status !== \"GAME_OVER\" ?\r\n\r\n                <div className=\"game-board\"\r\n                    style={{\r\n                        gridTemplateColumns: `repeat(${state.gridSize[0]}, minmax(20px, 1fr))`,\r\n                        gridTemplateRows: `repeat(${state.gridSize[1]}, minmax(20px, 1fr))`,\r\n                    }}>\r\n                    {state.game.squares.length > 0 && squareSprings.map(({ props, item, key }, i) => {\r\n                        return (<a.div\r\n                            style={{ ...props }}\r\n                            key={key}\r\n                            className=\"squareHolder\">\r\n                            <button\r\n                                className=\"square\"\r\n                                onClick={() => actions.handleClick(item.id)}\r\n                                disabled={!item.clickable}>\r\n                                {state.labels.card && <label>{item.civ}</label>}\r\n                                <a.div className=\"c back\" style={{ opacity: flipSprings[i].opacity.interpolate(o => 1 - o), transform: flipSprings[i].transform }} />\r\n                                <a.div className=\"c front\" style={{\r\n                                    opacity: flipSprings[i].opacity,\r\n                                    transform: flipSprings[i].transform.interpolate(t => `${t} rotateY(180deg)`),\r\n                                    backgroundImage: `url(http://localhost:5000/${item.image})`\r\n                                }} />\r\n                            </button>\r\n                        </a.div>\r\n                        )\r\n                    })}\r\n                    {/*state.game.squares.length > 0 && flipSprings.map(({opacity, transform}, i) => {\r\n                        let item = state.game.squares[i];\r\n                        return (<div\r\n                            key={item.id}\r\n                            className=\"squareHolder\">\r\n                            <button\r\n                                className=\"square\"\r\n                                onClick={() => actions.handleClick(item.id)}\r\n                                disabled={!item.clickable}>\r\n                                {state.labels.card && <label>{item.civ}</label>}\r\n                                <a.div class=\"c back\" style={{ opacity: opacity.interpolate(o => 1 - o), transform }} />\r\n                                <a.div class=\"c front\" style={{ \r\n                                    opacity, \r\n                                    transform: transform.interpolate(t => `${t} rotateY(180deg)`),\r\n                                    backgroundImage: `url(http://localhost:5000/${item.image})` \r\n                                    }} \r\n                                />\r\n                            </button>\r\n                        </div>\r\n                        )\r\n                    })*/}\r\n                </div>\r\n                : <GameOver state={state} dispatch={dispatch} />\r\n            }\r\n            <GameInfo\r\n                game={state.game}\r\n                me={props.me}\r\n                actions={actions}\r\n                helpers={state.labels}\r\n                moveTimer={state.moveTimer}\r\n            />\r\n        </div>)\r\n}\r\nconst GameSquare = ({ id, clickable, showLabels, civ, image, handleClick }) => {\r\n    return (\r\n        <button\r\n            className=\"square\"\r\n            onClick={() => handleClick(id)}\r\n            disabled={!clickable}>\r\n            {showLabels && <label>{civ}</label>}\r\n            <a.div className=\"back\"></a.div>\r\n            <a.div className=\"back\"></a.div>\r\n        </button>\r\n    )\r\n}","export default function GameOver(props) {\r\n  //const socket = useContext(SocketContext);\r\n  const { game } = props.state\r\n  const {message, round, users, id} = game\r\n  const sortByMatches = (users) => {\r\n    return users//.sort((u1, u2) => (u1.matches < u2.matches) ? -1 : 1)\r\n  }\r\n  return (\r\n    <div className=\"gameover\">\r\n      <div className=\"row\">\r\n        <div className=\"col\">\r\n          <span className=\"message\">{message}</span>\r\n          <span className=\"round\" > Attempts: {round}</span>\r\n        </div>\r\n      </div>\r\n      <div className='leaderBoard'>\r\n        <ol>\r\n          {sortByMatches(users).map(u => {\r\n            return (<li key={u.username}>{u.username} - {u.matches} matches</li>)\r\n          })}\r\n        </ol>\r\n      </div>\r\n    </div>\r\n  )\r\n}","import { getGridLayout } from '../helpers/helpers';\r\n\r\nexport default function gameReducer(state, action) { //PAGGES:  0 Loader || 1 GameJoiner || 2 GameCreator || 3 Game || 4 Login || 5 GameOver \r\n    let copy = { ...state }, data\r\n    if (action) data = action.payload\r\n    switch (action.type) {\r\n        case \"GAME_INFO\":\r\n            copy = setGameInfo(copy, state, data)\r\n            if (data.game.users.length === 1) copy.moveTimer.enabled = false;\r\n            return copy\r\n        case \"GAME_TIMER\":\r\n            copy.moveTimer = {time: parseInt(data), enabled: true};\r\n            return copy;\r\n\r\n        case \"TOGGLE_LABELS\":\r\n            if (data.type === \"GAME_INFO\") copy.labels.card = (data.value !== undefined) ? data.value : !copy.labels.leaveInfo;\r\n            else if (data.type === \"LEAVE_INFO\") copy.labels.leaveInfo = (data.value !== undefined) ? data.value : !copy.labels.leaveInfo;\r\n            else if (data.type === \"LABEL_INFO\") copy.labels.labelInfo = (data.value !== undefined) ? data.value : !copy.labels.labelInfo;\r\n            return copy\r\n\r\n        case \"SET_GRID\":\r\n            //checking if we need to return n\r\n            let newGridCalc = getGridLayout(copy.game.squares.length, data)\r\n            if (!newGridCalc) return copy;\r\n            if (newGridCalc[0] === copy.gridSize[0] && newGridCalc[1] === copy.gridSize[1]) return copy; //no change\r\n            copy.gridSize = newGridCalc;\r\n            return copy;\r\n        default:\r\n            return copy;\r\n    }\r\n}\r\nfunction setGameInfo(copy, state, {game}) {\r\n    copy = { ...copy, game: game};\r\n    copy.game.squares = game.squares.map(s => {\r\n        const clickable = (s.image === \"/cards/back.PNG\" && copy.game.status === \"ONGOING\" && copy.game.users.find(u => u.upNext).username === copy.me);\r\n        if (state.game.squares.length === 0 && copy.game.squares.length > 0) return { ...s, clickable: clickable, newSquare: true };\r\n        return { ...s, clickable: clickable };\r\n    })\r\n    return copy;\r\n}","import { useLayoutEffect, useState } from 'react';\r\n\r\nconst useWindowSize = () => {\r\n  const [size, setSize] = useState({width: 0, height: 0});\r\n  useLayoutEffect(() => {\r\n    function updateSize() {\r\n      setSize({width: window.innerWidth, height: window.innerHeight});\r\n    }\r\n    window.addEventListener('resize', updateSize);\r\n    updateSize();\r\n    return () => window.removeEventListener('resize', updateSize);\r\n  }, []);\r\n  return size;\r\n}\r\nexport default useWindowSize;"],"sourceRoot":""}